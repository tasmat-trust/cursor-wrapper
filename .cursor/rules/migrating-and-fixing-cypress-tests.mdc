---
description: 
globs: 
alwaysApply: false
---
# Migrating and Fixing Cypress Tests

## Background

The Hexagons application was migrated from Strapi v3 to Strapi v4, which changed the GraphQL response format. The frontend uses a `flattenDataAttributes` utility to transform Strapi v4 responses into the format that components expect.

## Why the Flattener was Created

Strapi v4 changed the GraphQL response structure:

**Strapi v3 format:**
```json
{
  "data": {
    "competencies": [
      { "id": "123", "status": "complete", "capability_fk": "456" }
    ]
  }
}
```

**Strapi v4 format:**
```json
{
  "data": {
    "competencies": {
      "data": [
        {
          "id": "123",
          "attributes": {
            "status": "complete",
            "capability_fk": "456"
          }
        }
      ]
    }
  }
}
```

The `flattenDataAttributes` utility transforms Strapi v4 format into the flat structure that components expect:
```json
{
  "competencies": [
    { "id": "123", "status": "complete", "capability_fk": "456" }
  ]
}
```

## Steps to Fix a Cypress Spec

1. **Update test fixtures to use Strapi v4 format** - Convert old v3 format fixtures to v4 format with `data` and `attributes` nesting
2. **Check component rendering chain** - Ensure Higher Order Components (HOCs) like `WithCompetencies`, `WithModules`, etc. are receiving properly formatted data

## Key Files

- `cypress/utils/flattenDataAttributes.js` - JavaScript version of the flattening utility for Cypress
- `components/data-fetching/useSWRWrapped.ts` - Original TypeScript flattening utility used by the app

## Common Issues

- Tests looking for `[data-test-id=hex-1]` but hexagons not rendering due to incorrect data format
- Mock data not being flattened properly, causing HOCs to not render child components
- Old v3 format fixtures not being converted to v4 format before flattening
